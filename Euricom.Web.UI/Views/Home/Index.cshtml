@using Euricom.Web.UI.Models
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_master.cshtml";
}

<div class="page-header">
    <h1>Timesheets (<span data-bind="text: viewModel.timesheets().length"></span>)</h1>
</div>

<div id="timesheetGrid" style="display: none;" data-bind="visible: showTimesheets">
    <div class="btn-toolbar">
        <div class="btn-group">
            <span class="btn btn-primary">Actions</span>
            <a class="btn btn-primary dropdown-toggle" data-toggle="dropdown" href="">
                <span class="caret"></span>
            </a>
            <ul class="dropdown-menu">
                <li><a href="#" id="selectAll" data-bind="click: selectAll">Select All</a></li>
                <li><a href="#" id="deselectAll" data-bind="click: deselectAll">Select None</a></li>
                <li class="divider"></li>
                <li><a href="#" id="delete" data-bind="click: showDeletionWarning">Delete</a></li>
            </ul>
        </div>
    </div>
    <table id="timesheets" class="table table-striped table-hover table-condensed">   
        <thead>
            <tr>
                <th></th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Month</th>
                <th>Year</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody data-bind="foreach: viewModel.timesheets">
            <tr data-bind="attr: { 'data-row-id': id }">
                <td><input type="checkbox" data-bind="value: id"/></td>
                <td data-bind="text: firstname"></td>
                <td data-bind="text: lastname"></td>
                <td data-bind="text: formattedMonth"></td>
                <td data-bind="text: year"></td>
                <td><a href="#" class="edit" data-bind="attr: { 'data-id': id }, click: edit">Edit</a></td>
            </tr>
        </tbody>
    </table>
</div>

<span class="message-loading" data-bind="visible: loading">Loading...</span>
<span id="no-timesheets" data-bind="visible: !showTimesheets() && !loading()">No timesheets found.</span>

<div class="modal hide fade" id="timesheet-modal">
    @{ Html.RenderPartial("_Timesheet", new Timesheet());}
</div>

<div class="modal hide fade" id="timesheet-delete">
	<div class="modal-header">
		<button type="button" class="close" data-dismiss="modal">×</button>
		<h3>Delete?</h3>
	</div>
    <div class="modal-body">
      <p>Are you sure you want to delete these timesheets?</p>
    </div>

	<div class="modal-footer">
		<a href="#" class="btn" data-dismiss="modal">Cancel</a>
		<input type="submit" class="btn btn-danger" value="Delete" data-bind="click: deleteTimesheets" />
	</div>
</div>

<div class="pull-right">
    <a id="new-timesheet" class="btn btn-success" data-toggle="modal" href="#timesheet-modal" data-bind="click: resetForm">Add timesheet</a>
</div>

<script type="text/javascript">

$(function () {
    ko.applyBindings(viewModel);
    viewModel.loadTimesheets();
});

function timesheet(timesheet) {
    this.id = ko.observable(timesheet.id);
    this.firstname = ko.observable(timesheet.firstname);
    this.lastname = ko.observable(timesheet.lastname);
    this.month = ko.observable(timesheet.month);
    this.year = ko.observable(timesheet.year);

    this.edit = function() {
        var form = $('#Timesheet');
        $('<input>').attr('type', 'hidden').attr('id', 'id').attr('name', 'id').val(this.id()).prependTo(form);
        form.find('#FirstName').val(this.firstname());
        form.find('#LastName').val(this.lastname());
        form.find('#Month').val(this.month());
        form.find('#Year').val(this.year());
        $('#timesheet-modal').modal('show');
    };

    this.update = function(timesheet) {
        this.id(timesheet.id);
        this.firstname(timesheet.firstname);
        this.lastname(timesheet.lastname);
        this.month(timesheet.month);
        this.year(timesheet.year);
    };
    
    this.formattedMonth = ko.computed(function() {
        var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        return monthNames[this.month() - 1];
    }, this);
}

var viewModel = {
    timesheets: ko.observableArray([]),
    showTimesheets: ko.observable(false),
    loading: ko.observable(false),

    loadTimesheets: function () {
        this.loading(true);
        var self = this;
        $.getJSON(
            '@Url.RouteUrl("DefaultApi", new { httproute = "", controller = "timesheets" })',
            function (timesheets) {
                self.timesheets.removeAll();
                $.each(timesheets, function (index, item) {
                    self.timesheets.push(new timesheet(item));
                });
                self.showTimesheets(self.timesheets().length > 0);
                self.loading(false);
            }
        );
    },

    postTimesheet: function (form) {
        form = $(form);
        if (!form.valid())
            return;

        var json = JSON.stringify(this._getTimesheetFromFrom(form));
        var update = form.find("input[type='hidden'][id='id']").val();
        var httpVerb = !update ? "POST" : "PUT";

        var self = this;

        $.ajax({
            url: '@Url.RouteUrl("DefaultApi", new { httproute = "", controller = "timesheets" })',
            type: httpVerb,
            data: json,
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            success: function (jsonObject) {
                if (update) {
                    form.find("input[type='hidden'][id='id']").remove();
                    var match = ko.utils.arrayFirst(self.timesheets(), function (item) {
                        return jsonObject.id === item.id();
                    });
                    match.update(jsonObject);
                }
                else {
                    self.timesheets.push(new timesheet(jsonObject));
                    self.showTimesheets(self.timesheets().length > 0);
                }
                $('#timesheet-modal').modal('hide');
            },
            error: function () {
                console.log('error');
            }
        });
    },

    selectAll: function () {
        $("input[type=checkbox]").attr('checked', 'checked');
    },

    deselectAll: function () {
        $("input[type=checkbox]").removeAttr('checked');
    },

    showDeletionWarning: function () {
        var checkboxes = $(":checkbox:checked:not([readonly])");
        var ids = new Array();
        $.each(checkboxes, function (index, checkbox) {
            ids.push($(checkbox).val());
        });

        if (ids.length == 0)
            return;

        $('#timesheet-delete').data('ids', ids).modal('show');
    },

    deleteTimesheets: function () {
        var ids = $('#timesheet-delete').data('ids');
        $('#timesheet-delete').modal('hide');

        var self = this;

        $.ajax({
            url: '@Url.RouteUrl("DefaultApi", new { httproute = "", controller = "timesheets" })',
            type: 'DELETE',
            data: ko.toJSON(ids),
            contentType: 'application/json; charset=utf-8',
            success: function () {
                $.each(ids, function (index, id) {
                    var match = ko.utils.arrayFirst(self.timesheets(), function (item) {
                        return id === item.id();
                    });
                    self.timesheets.remove(match);
                });
                self.showTimesheets(self.timesheets().length > 0);
            },
            error: function () {
                console.log('error');
            }
        });
    },

    resetForm: function () {
        var form = $('#Timesheet');
        form.validate().resetForm();
        form.get(0).reset();
    },

    _getTimesheetFromFrom: function (form) {
        if (form.length === 0)
            return null;

        form = $(form);
        var timesheet = {};
        form.find('input[type!=submit],select').each(function () {
            timesheet[this.name] = $(this).val();
        });

        return timesheet;
    }
};

</script>